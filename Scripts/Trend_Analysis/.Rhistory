p
p+ylim(c(50+120))
p+ylim(c(50, 120))
for(i in adv){print(i)}
figs <- list()
adv[1]
str_match(adv[1], ".*_(.*)_.*.cvs$")
str_match(adv[1], ".*advance_(.*)_.*.cvs$")
str_match(adv[1], ".*advance_(.*)_.*csv$")
str_match(adv[1], ".*_(.*)_.*csv$")
str_match(adv[1], ".*_(.*)\\.csv$")
str_match(adv[1], ".*_(\w_[\D]-[\D])\\.csv$")
str_match(adv[1], ".*_(\\w_[\D]-[\D])\\.csv$")
str_match(adv[1], ".*_(\\w_[\\D]-[\\D])\\.csv$")
str_match(adv[1], ".*_(\d{4})\\.csv$")
str_match(adv[1], ".*_(\\d{4})\\.csv$")
str_match(adv[1], "\d{4}")
str_match(adv[1], "\\d{4}")
str_match(adv[1], "\\d{4}-\\d{4}")
str_match(adv[1], "\\b\\d{4}-\\d{4}")
str_match(adv[1], "\\S\\d{4}-\\d{4}")
str_match(adv[1], "\\S_\\d{4}-\\d{4}")
str_match(adv[1], "_\\S_\\d{4}-\\d{4}")
adv[1]
str_match(adv[1], "_\\S*_\\d{4}-\\d{4}")
str_match(adv[1], "_(\\S*_\\d{4}-\\d{4})")
str_match(adv[1], ".*_(\\S*_\\d{4}-\\d{4})")
#Location where outputs will be saved
Outputs <- "C:/Users/ldfierro/OneDrive - University of Tasmania/ACCESS_Outputs/Figures/TimeSeries/SeaIceSeasonality/PolarZones/"
paste0(Outputs, str_match(adv[1], ".*_(\\S*_\\d{4}-\\d{4})", .png)
paste0(Outputs, str_match(adv[1], ".*_(\\S*_\\d{4}-\\d{4})"), .png)
paste0(Outputs, str_match(adv[1], ".*_(\\S*_\\d{4}-\\d{4})"), ".png")
paste0(Outputs, str_match(adv[1], ".*_(\\S*_\\d{4}-\\d{4})")[,2], ".png")
paste0(Outputs, "SeaIceAdvance", str_match(adv[1], ".*_(\\S*_\\d{4}-\\d{4})")[,2], ".png")
paste0(Outputs, "SeaIceAdvance_", str_match(adv[1], ".*_(\\S*_\\d{4}-\\d{4})")[,2], ".png")
#Defining function to plot results
plot_Trends <- function(list, y_lab, units_change, group_yrs){
#Detect the file format to save the figure
extension <- str_match(out_file, ".*\\.(.*)")[,2]
#If none is provided, then saving figures as png
if(is.na(extension)){
extension = "png"}
#Creating figure
ggplot()+
geom_point(data = list$raw, aes(obs, var))+
geom_line(data = list$raw, aes(obs, var), col = "azure3")+
geom_ribbon(data = list$confInt, aes(x = obs, ymin = lwr, ymax = upr), fill = "grey70", alpha = 0.4,
show.legend = F)+
geom_line(data = list$pred_LM, aes(x = obs, y = pred,
colour = sprintf("Linear regression (LM), p-value = %.3f",
list$coef_LM_raw["obs", "Pr(>|t|)"])))+
geom_line(data = list$pred_group_LM, aes(x = obs, y = pred, colour = sprintf("Moving Block LM, p-value = %.3f",
list$coef_LM_group["obs", "Pr(>|t|)"])))+
geom_line(data = list$pred_AR1, aes(x = obs, y = pred, colour = sprintf("Autoregressive (AR1), p-value = %.3f",
list$coef_AR1["obs", "p-value"])))+
geom_point(data = list$group_data, aes(x = obs, y = var_grp), col = "chocolate1", show.legend = F)+
scale_color_manual(values = c("dodgerblue4", "chocolate1", "chartreuse"))+
labs(x = "Timesteps", y = y_lab,
caption = sprintf("Trend = %.2f ± %.2f %s", list$coef_LM_group["obs", "Estimate"]*group_yrs,
list$coef_LM_group["obs", "Std. Error"]*group_yrs, units_change))+
guides(colour = guide_legend(title = element_blank()))+
theme_bw()+
theme(panel.grid = element_blank(), legend.position = "top", legend.box.spacing = unit(0.1, "cm"),
plot.caption = element_text(hjust = 0, size = 12), legend.text = element_text(size = 12),
axis.text = element_text(size = 11), axis.title = element_text(size = 12))
}
figs <- list()
for(i in seq_along(adv)){
out <- Trend_Calculation(adv[i], group_yrs = 10, var_name = "aice")
figs[[i]] <- plot_Trends(out, "Sea ice retreat (Days from February 15)", "days/decade", group_yrs = 10)
}
figs
figs$ylin
figs$ylim
ggplot_build(figs[[1]])
ggplot_build(figs[[1]])$layour
ggplot_build(figs[[1]])$layout
ggplot_build(figs[[1]])$layout$limits
ggplot_build(figs[[1]])$layout$coord$limits
layer_scales(p[[1]])$y
layer_scales(p[[1]])$y$range$range
layer_scales(figs[[1]])$y$range$range
for(i in figs){print(i)}
length(figs)
for(i in seq_along(figs)){print(layer_scales(figs[[i]])$y$range$range)}
class(layer_scales(figs[[1]])$y$range$range)
a <- layer_scales(figs[[1]])$y$range$range
a
lims <- vector()
for(i in seq_along(figs)){append(lims, layer_scales(figs[[i]])$y$range$range)}
lims
append(lims, layer_scales(figs[[i]])$y$range$range)
append(lims, layer_scales(figs[[4]])$y$range$range)
for(i in seq_along(figs)){lims <- append(lims, layer_scales(figs[[i]])$y$range$range)}
lims
min(lims); max(lims)
lims <- c(min(lims), max(lims))
lims
figs[[1]]
figs[[1]]+ylim(lims)
#Creating an empty list to save figures
figs <- list()
#Create an empty vector to standarise y lims of all plots
lims <- vector()
#Applying functions
for(i in seq_along(adv)){
out <- Trend_Calculation(adv[i], group_yrs = 10, var_name = "aice")
figs[[i]] <- plot_Trends(out, "Sea ice retreat (Days from February 15)", "days/decade", group_yrs = 10)
lims <- append(lims, layer_scales(figs[[i]])$y$range$range)
}
lims
#Get y limits to standarise them across figures before saving
lims <- c(min(lims), max(lims))
for(i in seq_along(figs)){
figs[[i]] <- figs[[i]]+ylim(lims)
}
figs
str_match(adv[1], ".*_(\\S*)_\\d{4}-\\d{4}")
str_match(adv[2], ".*_(\\S*)_\\d{4}-\\d{4}")
str_match(adv[2], ".*_(\\w*)_\\d{4}-\\d{4}")
str_match(adv[2], ".*_(\\W*)_\\d{4}-\\d{4}")
str_match(adv[2], ".*_(.*)_\\d{4}-\\d{4}")
str_match(adv[2], ".*_(\\S*)_\\d{4}-\\d{4}")
str_match(adv[2], ".*_(.*)_\\d{4}-\\d{4}")
str_match(adv[2], ".*_(.*)_\\d{4}-\\d{4}")[,2]
str_match(adv[3], ".*_(.*)_\\d{4}-\\d{4}")[,2]
str_match(ret[3], ".*_(.*)_\\d{4}-\\d{4}")[,2]
paste0(Outputs, "SeaIceAdvance_", str_match(adv[3], ".*_(.*)_\\d{4}-\\d{4}")[,2], ".png")
paste0(Outputs, "SeaIceAdvance_", str_match(adv[i], ".*_(.*_\\d{4}-\\d{4})")[,2], ".png")
#####
#Defining function to plot results
plot_Trends <- function(list, y_lab, units_change, group_yrs, title){
#Detect the file format to save the figure
extension <- str_match(out_file, ".*\\.(.*)")[,2]
#If none is provided, then saving figures as png
if(is.na(extension)){
extension = "png"}
#Creating figure
ggplot()+
geom_point(data = list$raw, aes(obs, var))+
geom_line(data = list$raw, aes(obs, var), col = "azure3")+
geom_ribbon(data = list$confInt, aes(x = obs, ymin = lwr, ymax = upr), fill = "grey70", alpha = 0.4,
show.legend = F)+
geom_line(data = list$pred_LM, aes(x = obs, y = pred,
colour = sprintf("Linear regression (LM), p-value = %.3f",
list$coef_LM_raw["obs", "Pr(>|t|)"])))+
geom_line(data = list$pred_group_LM, aes(x = obs, y = pred, colour = sprintf("Moving Block LM, p-value = %.3f",
list$coef_LM_group["obs", "Pr(>|t|)"])))+
geom_line(data = list$pred_AR1, aes(x = obs, y = pred, colour = sprintf("Autoregressive (AR1), p-value = %.3f",
list$coef_AR1["obs", "p-value"])))+
geom_point(data = list$group_data, aes(x = obs, y = var_grp), col = "chocolate1", show.legend = F)+
scale_color_manual(values = c("dodgerblue4", "chocolate1", "chartreuse"))+
labs(x = "Timesteps", y = y_lab, title = title,
caption = sprintf("Trend = %.2f ± %.2f %s", list$coef_LM_group["obs", "Estimate"]*group_yrs,
list$coef_LM_group["obs", "Std. Error"]*group_yrs, units_change))+
guides(colour = guide_legend(title = element_blank()))+
theme_bw()+
theme(panel.grid = element_blank(), legend.position = "top", legend.box.spacing = unit(0.1, "cm"),
plot.caption = element_text(hjust = 0, size = 12), legend.text = element_text(size = 12),
axis.text = element_text(size = 11), axis.title = element_text(size = 12))
}
str_match(adv[i], ".*_(.*)_\\d{4}-\\d{4}")[,2]
#Applying functions
for(i in seq_along(adv)){
out <- Trend_Calculation(adv[i], group_yrs = 10, var_name = "aice")
sector <- str_match(adv[i], ".*_(.*)_\\d{4}-\\d{4}")[,2]
figs[[i]] <- plot_Trends(out, "Sea ice retreat (Days from February 15)", "days/decade", group_yrs = 10, title = sector)
lims <- append(lims, layer_scales(figs[[i]])$y$range$range)
}
figs[[1]]
figs[[1]]+theme(title = element_text(size = 12))
figs[[1]]+theme(title = element_text(size = 14))
#####
#Defining function to plot results
plot_Trends <- function(list, y_lab, units_change, group_yrs, title){
#Detect the file format to save the figure
extension <- str_match(out_file, ".*\\.(.*)")[,2]
#If none is provided, then saving figures as png
if(is.na(extension)){
extension = "png"}
#Creating figure
ggplot()+
geom_point(data = list$raw, aes(obs, var))+
geom_line(data = list$raw, aes(obs, var), col = "azure3")+
geom_ribbon(data = list$confInt, aes(x = obs, ymin = lwr, ymax = upr), fill = "grey70", alpha = 0.4,
show.legend = F)+
geom_line(data = list$pred_LM, aes(x = obs, y = pred,
colour = sprintf("Linear regression (LM), p-value = %.3f",
list$coef_LM_raw["obs", "Pr(>|t|)"])))+
geom_line(data = list$pred_group_LM, aes(x = obs, y = pred, colour = sprintf("Moving Block LM, p-value = %.3f",
list$coef_LM_group["obs", "Pr(>|t|)"])))+
geom_line(data = list$pred_AR1, aes(x = obs, y = pred, colour = sprintf("Autoregressive (AR1), p-value = %.3f",
list$coef_AR1["obs", "p-value"])))+
geom_point(data = list$group_data, aes(x = obs, y = var_grp), col = "chocolate1", show.legend = F)+
scale_color_manual(values = c("dodgerblue4", "chocolate1", "chartreuse"))+
labs(x = "Timesteps", y = y_lab, title = title,
caption = sprintf("Trend = %.2f ± %.2f %s", list$coef_LM_group["obs", "Estimate"]*group_yrs,
list$coef_LM_group["obs", "Std. Error"]*group_yrs, units_change))+
guides(colour = guide_legend(title = element_blank()))+
theme_bw()+
theme(panel.grid = element_blank(), legend.position = "top", legend.box.spacing = unit(0.1, "cm"),
plot.caption = element_text(hjust = 0, size = 12), legend.text = element_text(size = 12),
axis.text = element_text(size = 11), axis.title = element_text(size = 12), title = element_text(size = 14))
}
#Creating an empty list to save figures
figs <- list()
#Create an empty vector to standarise y lims of all plots
lims <- vector()
#Applying functions
for(i in seq_along(adv)){
out <- Trend_Calculation(adv[i], group_yrs = 10, var_name = "aice")
sector <- paste0(str_match(adv[i], ".*_(.*)_\\d{4}-\\d{4}")[,2], " sector")
figs[[i]] <- plot_Trends(out, "Sea ice retreat (Days from February 15)", "days/decade", group_yrs = 10, title = sector)
lims <- append(lims, layer_scales(figs[[i]])$y$range$range)
}
figs[[1]]
#Get y limits to standarise them across figures before saving
lims <- c(min(lims), max(lims))
for(i in seq_along(figs)){
figs[[i]] <- figs[[i]]+ylim(lims)
fileout <- paste0(Outputs, "SeaIceAdvance_", str_match(adv[i], ".*_(.*_\\d{4}-\\d{4})")[,2], ".png")
ggsave(fileout, figs[[i]], device = "png")
}
library(cowplot)
plot_grid(unlist(figs))
unlist(figs)
plot_grid(figs)
plot_grid(figs[[:]])
plot_grid(figs[[1:]])
figs[[1:2]]
figs[[1,2]]
figs[[1]]
figs[1,2]
a <- str_match(adv[i], ".*_(.*_\\d{4}-\\d{4})")[,2]
a
a <- str_match(adv[i], ".*_(.*)_\\d{4}-\\d{4}")[,2]
A
a
figs[[a]] <- figs[[1]]
names(figs)
str_match(adv[i], ".*_(.*)_\\d{4}-\\d{4}")[,2]
paste0(sector, " sector")
sector <- str_match(adv[i], ".*_(.*)_\\d{4}-\\d{4}")[,2]
paste0(sector, " sector")
#Creating an empty list to save figures
figs <- list()
#Create an empty vector to standarise y axis limits of all plots
lims <- vector()
#Applying functions
for(i in seq_along(adv)){
out <- Trend_Calculation(adv[i], group_yrs = 10, var_name = "aice")
sector <- str_match(adv[i], ".*_(.*)_\\d{4}-\\d{4}")[,2]
figs[[sector]] <- plot_Trends(out, "Sea ice retreat (Days from February 15)", "days/decade", group_yrs = 10,
title = paste0(sector, " sector"))
lims <- append(lims, layer_scales(figs[[i]])$y$range$range)
}
figs
unlist(figs)
str_match(adv, ".*_(.*)_\\d{4}-\\d{4}")[,2]
plot_grid(figs[["Atlantic"]], figs[["Central Indian"]], figs[["East Indian"]], figs[["East Pacific"]], figs[["West Pacific"]])
figs[[1]]+guides(colour = guide_legend(nrow = 2))
figs[[1]]+guides(colour = guide_legend(nrow = 2, title = element_blank()))
#####
#Defining function to plot results
plot_Trends <- function(list, y_lab, units_change, group_yrs, title){
#Creating figure
ggplot()+
geom_point(data = list$raw, aes(obs, var))+
geom_line(data = list$raw, aes(obs, var), col = "azure3")+
geom_ribbon(data = list$confInt, aes(x = obs, ymin = lwr, ymax = upr), fill = "grey70", alpha = 0.4,
show.legend = F)+
geom_line(data = list$pred_LM, aes(x = obs, y = pred,
colour = sprintf("Linear regression (LM), p-value = %.3f",
list$coef_LM_raw["obs", "Pr(>|t|)"])))+
geom_line(data = list$pred_group_LM, aes(x = obs, y = pred, colour = sprintf("Moving Block LM, p-value = %.3f",
list$coef_LM_group["obs", "Pr(>|t|)"])))+
geom_line(data = list$pred_AR1, aes(x = obs, y = pred, colour = sprintf("Autoregressive (AR1), p-value = %.3f",
list$coef_AR1["obs", "p-value"])))+
geom_point(data = list$group_data, aes(x = obs, y = var_grp), col = "chocolate1", show.legend = F)+
scale_color_manual(values = c("dodgerblue4", "chocolate1", "chartreuse"))+
labs(x = "Timesteps", y = y_lab, title = title,
caption = sprintf("Trend = %.2f ± %.2f %s", list$coef_LM_group["obs", "Estimate"]*group_yrs,
list$coef_LM_group["obs", "Std. Error"]*group_yrs, units_change))+
guides(colour = guide_legend(title = element_blank(), nrow = 2))+
theme_bw()+
theme(panel.grid = element_blank(), legend.position = "top", legend.box.spacing = unit(0.1, "cm"),
plot.caption = element_text(hjust = 0, size = 12), legend.text = element_text(size = 12),
axis.text = element_text(size = 11), axis.title = element_text(size = 12), title = element_text(size = 14))
}
#Creating an empty list to save figures
figs <- list()
#Create an empty vector to standarise y axis limits of all plots
lims <- vector()
#Applying functions
for(i in seq_along(adv)){
out <- Trend_Calculation(adv[i], group_yrs = 10, var_name = "aice")
sector <- str_match(adv[i], ".*_(.*)_\\d{4}-\\d{4}")[,2]
figs[[sector]] <- plot_Trends(out, "Sea ice retreat (Days from February 15)", "days/decade", group_yrs = 10,
title = paste0(sector, " sector"))
lims <- append(lims, layer_scales(figs[[i]])$y$range$range)
}
plot_grid(figs[["Atlantic"]], figs[["Central Indian"]], figs[["East Indian"]], figs[["East Pacific"]], figs[["West Pacific"]])
figs[[i]]
names(figs[[i]])
plot_grid(figs[["Atlantic"]],
figs[["Central Indian"]]+theme(axis.title = element_blank()),
figs[["East Indian"]]+theme(axis.title = element_blank()),
figs[["East Pacific"]],
figs[["West Pacific"]]+theme(axis.title = element_blank()))
#Creating an empty list to save figures
figs <- list()
#Create an empty vector to standarise y axis limits of all plots
lims <- vector()
#Applying functions
for(i in seq_along(adv)){
out <- Trend_Calculation(adv[i], group_yrs = 10, var_name = "aice")
sector <- str_match(adv[i], ".*_(.*)_\\d{4}-\\d{4}")[,2]
figs[[sector]] <- plot_Trends(out, "Sea ice retreat (Days from February 15)", "days/decade", group_yrs = 10,
title = paste0(sector, " sector"))
lims <- append(lims, layer_scales(figs[[i]])$y$range$range)
}
#Get y limits to standarise them across figures before saving
lims <- c(min(lims), max(lims))
for(i in seq_along(figs)){
figs[[i]] <- figs[[i]]+ylim(lims)
fileout <- paste0(Outputs, "SeaIceAdvance_", str_match(adv[i], ".*_(.*_\\d{4}-\\d{4})")[,2], ".png")
ggsave(fileout, figs[[i]], device = "png")
}
plot_grid(figs[["Atlantic"]],
figs[["Central Indian"]]+theme(axis.title = element_blank()),
figs[["East Indian"]]+theme(axis.title = element_blank()),
figs[["East Pacific"]],
figs[["West Pacific"]]+theme(axis.title = element_blank()))
p <- plot_grid(figs[["Atlantic"]],
figs[["Central Indian"]]+theme(axis.title = element_blank()),
figs[["East Indian"]]+theme(axis.title = element_blank()),
figs[["East Pacific"]],
figs[["West Pacific"]]+theme(axis.title = element_blank()))
ggsave("Outputs/test.png", p, device = "png")
ggsave("Outputs/test.png", p, device = "png", height = 10, width = 15)
ggsave("Outputs/test.png", p, device = "png", height = 8, width = 20)
ret <- list.files(Inputs, pattern = "retreat", full.names = T)
#Location of sea ice seasonality data
Inputs <- "C:/Users/ldfierro/OneDrive - University of Tasmania/ACCESS_Outputs/Calculations/SeaIceSeasonality/Yearly/Sectors/"
#Location where outputs will be saved
Outputs <- "C:/Users/ldfierro/OneDrive - University of Tasmania/ACCESS_Outputs/Figures/TimeSeries/SeaIceSeasonality/PolarZones/"
#Get lists of files for sea ice seasons
adv <- list.files(Inputs, pattern = "advance", full.names = T)
ret <- list.files(Inputs, pattern = "retreat", full.names = T)
dur <- list.files(Inputs, pattern = "duration", full.names = T)
#Defining function that will calculate time series trends
Trend_Calculation <- function(filepath, group_yrs, var_name){
#Load csv file containing sea ice data
data <- read_csv(filepath) %>%
#Rename variable of interest to standarise code
rename("var" = var_name) %>%
#Create a column of unique identifiers per row
rowid_to_column("obs") %>%
#Create groups based on the number of years set as input
mutate(group = (obs-1)%/%group_yrs)
#Calculate a simple linear model
fit_LM <- lm(var ~ obs, data)
#Extract coefficients of linear model
coef_LM <- summary(fit_LM)$coefficients
###
#Group data by group_yrs
data_season <- data %>%
group_by(group) %>%
summarise(obs = mean(obs), var_grp = mean(var))
#Calculate LM on grouped data
fit_LM_season <- lm(var_grp ~ obs, data_season)
#Extract coefficient of LM on grouped data
coef_LM_season <-summary(fit_LM_season)$coefficients
###
#Calculating predictions based on grouped LM results
data.confInt <- predict(fit_LM_season, interval = "confidence", data = data_season) %>%
as_tibble() %>%
bind_cols(data_season, .)
###
#Calculate Generalised Linear Squares with AR1
fit_AR1 <- gls(var ~ obs, correlation = corAR1(), data = data)
#Extract coefficients of GLS
coeff_AR1 <- summary(fit_AR1)$tTable
###
#Calculating predictions based on all model defined above
data.LM <- data.frame(obs = data$obs) %>%
mutate(pred = predict(fit_LM, newdata = .))
data.MB_LM <- data.frame(obs = data$obs) %>%
mutate(pred = predict(fit_LM_season, newdata = .))
data.AR1 <- data.frame(obs = data$obs) %>%
mutate(pred = predict(fit_AR1, newdata = .))
return(list(raw = data, LM_raw = fit_LM, coef_LM_raw = coef_LM,
group_data = data_season, LM_group = fit_LM_season, coef_LM_group = coef_LM_season,
confInt = data.confInt, AR1 = fit_AR1, coef_AR1 = coeff_AR1,
pred_LM = data.LM, pred_group_LM = data.MB_LM, pred_AR1 = data.AR1))
}
#####
#Defining function to plot results
plot_Trends <- function(list, y_lab, units_change, group_yrs, title){
#Creating figure
ggplot()+
geom_point(data = list$raw, aes(obs, var))+
geom_line(data = list$raw, aes(obs, var), col = "azure3")+
geom_ribbon(data = list$confInt, aes(x = obs, ymin = lwr, ymax = upr), fill = "grey70", alpha = 0.4,
show.legend = F)+
geom_line(data = list$pred_LM, aes(x = obs, y = pred,
colour = sprintf("Linear regression (LM), p-value = %.3f",
list$coef_LM_raw["obs", "Pr(>|t|)"])))+
geom_line(data = list$pred_group_LM, aes(x = obs, y = pred, colour = sprintf("Moving Block LM, p-value = %.3f",
list$coef_LM_group["obs", "Pr(>|t|)"])))+
geom_line(data = list$pred_AR1, aes(x = obs, y = pred, colour = sprintf("Autoregressive (AR1), p-value = %.3f",
list$coef_AR1["obs", "p-value"])))+
geom_point(data = list$group_data, aes(x = obs, y = var_grp), col = "chocolate1", show.legend = F)+
scale_color_manual(values = c("dodgerblue4", "chocolate1", "chartreuse"))+
labs(x = "Timesteps", y = y_lab, title = title,
caption = sprintf("Trend = %.2f ± %.2f %s", list$coef_LM_group["obs", "Estimate"]*group_yrs,
list$coef_LM_group["obs", "Std. Error"]*group_yrs, units_change))+
guides(colour = guide_legend(title = element_blank(), nrow = 2))+
theme_bw()+
theme(panel.grid = element_blank(), legend.position = "top", legend.box.spacing = unit(0.1, "cm"),
plot.caption = element_text(hjust = 0, size = 12), legend.text = element_text(size = 12),
axis.text = element_text(size = 11), axis.title = element_text(size = 12), title = element_text(size = 14))
}
####
#Advance
#Creating an empty list to save figures
figs <- list()
#Create an empty vector to standarise y axis limits of all plots
lims <- vector()
#Applying functions
for(i in seq_along(adv)){
out <- Trend_Calculation(adv[i], group_yrs = 10, var_name = "aice")
sector <- str_match(adv[i], ".*_(.*)_\\d{4}-\\d{4}")[,2]
figs[[sector]] <- plot_Trends(out, "Sea ice advance (Days from February 15)", "days/decade", group_yrs = 10,
title = paste0(sector, " sector"))
lims <- append(lims, layer_scales(figs[[i]])$y$range$range)
}
#Get y limits to standarise them across figures before saving
lims <- c(min(lims), max(lims))
for(i in seq_along(figs)){
figs[[i]] <- figs[[i]]+ylim(lims)
fileout <- paste0(Outputs, "SeaIceAdvance_", str_match(adv[i], ".*_(.*_\\d{4}-\\d{4})")[,2], ".png")
ggsave(fileout, figs[[i]], device = "png")
}
####
#Retreat
#Creating an empty list to save figures
figs <- list()
#Create an empty vector to standarise y axis limits of all plots
lims <- vector()
#Applying functions
for(i in seq_along(ret)){
out <- Trend_Calculation(ret[i], group_yrs = 10, var_name = "aice")
sector <- str_match(ret[i], ".*_(.*)_\\d{4}-\\d{4}")[,2]
figs[[sector]] <- plot_Trends(out, "Sea ice retreat (Days from February 15)", "days/decade", group_yrs = 10,
title = paste0(sector, " sector"))
lims <- append(lims, layer_scales(figs[[i]])$y$range$range)
}
#Get y limits to standarise them across figures before saving
lims <- c(min(lims), max(lims))
for(i in seq_along(figs)){
figs[[i]] <- figs[[i]]+ylim(lims)
fileout <- paste0(Outputs, "SeaIceRetreat_", str_match(ret[i], ".*_(.*_\\d{4}-\\d{4})")[,2], ".png")
ggsave(fileout, figs[[i]], device = "png")
}
####
#Duration
#Creating an empty list to save figures
figs <- list()
#Create an empty vector to standarise y axis limits of all plots
lims <- vector()
#Applying functions
for(i in seq_along(dur)){
out <- Trend_Calculation(dur[i], group_yrs = 10, var_name = "aice")
sector <- str_match(dur[i], ".*_(.*)_\\d{4}-\\d{4}")[,2]
figs[[sector]] <- plot_Trends(out, "Sea ice duration (Total number of days)", "days/decade", group_yrs = 10,
title = paste0(sector, " sector"))
lims <- append(lims, layer_scales(figs[[i]])$y$range$range)
}
#Get y limits to standarise them across figures before saving
lims <- c(min(lims), max(lims))
for(i in seq_along(figs)){
figs[[i]] <- figs[[i]]+ylim(lims)
fileout <- paste0(Outputs, "SeaIceDuration_", str_match(dur[i], ".*_(.*_\\d{4}-\\d{4})")[,2], ".png")
ggsave(fileout, figs[[i]], device = "png")
}
filepath <- adv[1]
var_name <- "aice"
group_yrs <- 10
data <- read_csv(filepath) %>%
#Rename variable of interest to standarise code
rename("var" = var_name) %>%
#Create a column of unique identifiers per row
rowid_to_column("obs") %>%
#Create groups based on the number of years set as input
mutate(group = (obs-1)%/%group_yrs)
fit_LM <- lm(var ~ obs, data)
plot(fit_LM)
#Applying functions
for(i in seq_along(adv)){
out <- Trend_Calculation(adv[i], group_yrs = 10, var_name = "aice")
sector <- str_match(adv[i], ".*_(.*)_\\d{4}-\\d{4}")[,2]
figs[[sector]] <- plot_Trends(out, "Sea ice advance (Days from February 15)", "days/decade", group_yrs = 10,
title = paste0(sector, " sector"))
lims <- append(lims, layer_scales(figs[[i]])$y$range$range)
}
View(out)
summary(out$AR1)
View(data)
sprintf("Trend = %.2f ± %.2f %s", list$coef_LM_group["obs", "Estimate"]*group_yrs,
list$coef_LM_group["obs", "Std. Error"]*group_yrs, units_change))
out$coef_LM_group
